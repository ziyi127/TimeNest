name: 测试构建

on:
  push:
    branches: [ feature/*, fix/* ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  test-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2022, ubuntu-latest ]
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 缓存pip依赖
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka==2.4.11
        pip install ordered-set
        pip install zstandard
    
    - name: 运行快速编译测试
      timeout-minutes: 20
      run: |
        # 快速测试编译，不生成完整分发包
        python -m nuitka --version
        python -c "import tkinter; print('tkinter可用')"
        
        # 测试Python语法
        python -m py_compile main.py
        python -m py_compile build_with_nuitka.py
        
        # 测试UI模块导入
        python -c "from ui.mainwindow import DragWindow; print('UI模块导入成功')"
        python -c "from ui.tray import TrayManager; print('托盘模块导入成功')"
    
    - name: 检查构建脚本
      run: |
        python build_with_nuitka.py --help 2>/dev/null || echo "构建脚本语法检查通过"
    
    - name: 测试环境信息
      run: |
        echo "## 测试环境信息" >> $GITHUB_STEP_SUMMARY
        echo "- 操作系统: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python版本: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- 测试时间: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 环境测试通过" >> $GITHUB_STEP_SUMMARY