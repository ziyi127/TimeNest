import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import RinUI

ScrollView {
    id: dashboardView

    contentWidth: availableWidth
    contentHeight: mainColumn.implicitHeight

    Column {
        id: mainColumn
        width: dashboardView.availableWidth
        spacing: 24
        
        // È°µÈù¢Ê†áÈ¢ò
        Text {
            text: qsTr("‰ª™Ë°®Êùø")
            font.pixelSize: 32
            font.bold: true
            color: timeNestBridge.themeColors.text_primary
        }
        
        Flow {
            width: parent.width
            spacing: 16

            Frame {
                width: 200
                height: 120

                Column {
                    anchors.centerIn: parent
                    spacing: 8

                    Text {
                        text: "üìã" // "calendar_today"
                        font.pixelSize: 32
                        color: "#2196f3"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        text: qsTr("‰ªäÊó•ËØæÁ®ã")
                        font.pixelSize: 16
                        color: timeNestBridge.themeColors.text_secondary
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        id: todayCoursesCount
                        text: "5"
                        font.pixelSize: 24
                        font.bold: true
                        color: timeNestBridge.themeColors.text_primary
                        anchors.horizontalCenter: parent.horizontalCenter

                        Component.onCompleted: {
                            if (typeof timeNestBridge !== 'undefined') {
                                var courses = timeNestBridge.getScheduleData()
                                var todayCount = 0
                                var today = new Date()
                                var dayOfWeek = today.getDay()

                                for (var i = 0; i < courses.length; i++) {
                                    if (courses[i].day_of_week === dayOfWeek) {
                                        todayCount++
                                    }
                                }
                                text = todayCount.toString()
                            }
                        }
                    }
                }
            }
            
            Frame {
                width: 200
                height: 120

                Column {
                    anchors.centerIn: parent
                    spacing: 8

                    Text {
                        text: "üìã" // "task_alt"
                        font.pixelSize: 32
                        color: "#ff9800"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        text: qsTr("ÂæÖÂäû‰ªªÂä°")
                        font.pixelSize: 16
                        color: timeNestBridge.themeColors.text_secondary
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        id: pendingTasksCount
                        text: "12"
                        font.pixelSize: 24
                        font.bold: true
                        color: timeNestBridge.themeColors.text_primary
                        anchors.horizontalCenter: parent.horizontalCenter

                        Component.onCompleted: {
                            if (typeof timeNestBridge !== 'undefined') {
                                var tasks = timeNestBridge.getTasksData()
                                var pendingCount = 0

                                for (var i = 0; i < tasks.length; i++) {
                                    if (tasks[i].status === "ËøõË°å‰∏≠") {
                                        pendingCount++
                                    }
                                }
                                text = pendingCount.toString()
                            }
                        }
                    }
                }
            }
            
            Frame {
                width: 200
                height: 120

                Column {
                    anchors.centerIn: parent
                    spacing: 8

                    Text {
                        text: "üìã" // "check_circle"
                        font.pixelSize: 32
                        color: "#4caf50"
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        text: qsTr("Â∑≤ÂÆåÊàê‰ªªÂä°")
                        font.pixelSize: 16
                        color: timeNestBridge.themeColors.text_secondary
                        anchors.horizontalCenter: parent.horizontalCenter
                    }

                    Text {
                        id: completedTasksCount
                        text: "2"
                        font.pixelSize: 24
                        font.bold: true
                        color: timeNestBridge.themeColors.text_primary
                        anchors.horizontalCenter: parent.horizontalCenter
                    }
                }
            }
        }
        
        Rectangle {
            width: parent.width
            height: 300
            radius: 8
            
            Column {
                anchors.fill: parent
                anchors.margins: 16
                spacing: 16
                
                Text {
                    text: qsTr("‰ªäÊó•ËØæÁ®ãÂÆâÊéí")
                    font.pixelSize: 18
                    font.bold: true
                    color: timeNestBridge.themeColors.text_primary
                }
                
                ListView {
                    id: todayClassesListView
                    width: parent.width
                    height: parent.height - 40
                    model: ListModel {
                        id: todayClassesModel
                    }

                    Component.onCompleted: {
                        loadTodayClasses()
                    }
                    
                    delegate: Rectangle {
                        width: parent.width
                        height: 50
                        color: {
                            if (model.status === "current") {
                                return timeNestBridge.themeColors.success
                            } else {
                                return "transparent"
                            }
                        }
                        radius: 4
                        
                        Row {
                            anchors.left: parent.left
                            anchors.verticalCenter: parent.verticalCenter
                            anchors.leftMargin: 12
                            spacing: 16
                            
                            Text {
                                text: model.time
                                font.pixelSize: 14
                                color: timeNestBridge.themeColors.text_secondary
                                width: 100
                                anchors.verticalCenter: parent.verticalCenter
                            }
                            
                            Text {
                                text: model.subject
                                font.pixelSize: 14
                                font.bold: model.status === "current"
                                color: timeNestBridge.themeColors.text_primary
                                width: 120
                                anchors.verticalCenter: parent.verticalCenter
                            }
                            
                            Text {
                                text: model.location
                                font.pixelSize: 14
                                color: timeNestBridge.themeColors.text_secondary
                                anchors.verticalCenter: parent.verticalCenter
                            }
                        }
                        
                        Rectangle {
                            visible: model.status === "current"
                            width: 4
                            height: parent.height * 0.6
                            anchors.left: parent.left
                            anchors.verticalCenter: parent.verticalCenter
                            color: "#4caf50"
                            radius: 2
                        }
                    }
                }
            }
        }
        
        Rectangle {
            width: parent.width
            height: 150
            radius: 8
            
            Column {
                anchors.fill: parent
                anchors.margins: 16
                spacing: 16
                
                Text {
                    text: qsTr("Âø´ÈÄüÊìç‰Ωú")
                    font.pixelSize: 18
                    font.bold: true
                    color: timeNestBridge.themeColors.text_primary
                }
                
                Row {
                    spacing: 16

                    Button {
                        text: qsTr("Ê∑ªÂä†ËØæÁ®ã")
                        onClicked: {
                            if (typeof timeNestBridge !== 'undefined') {
                                timeNestBridge.showNewCourseDialog()
                            }
                        }
                    }

                    Button {
                        text: qsTr("ÂàõÂª∫‰ªªÂä°")
                        onClicked: {
                            createNewTask()
                        }
                    }

                    Button {
                        text: qsTr("ÊâìÂºÄÊÇ¨ÊµÆÁ™ó")
                        onClicked: {
                            toggleFloatingWindow()
                        }
                    }

                    Button {
                        text: qsTr("Âà∑Êñ∞Êï∞ÊçÆ")
                        onClicked: {
                            refreshDashboard()
                        }
                    }
                }
            }
        }
    }

    // JavaScript ÂáΩÊï∞
    function getTodayClassesCount() {
        // ËøîÂõû‰ªäÊó•ËØæÁ®ãÊï∞Èáè
        if (typeof timeNestBridge !== 'undefined') {
            try {
                var courses = timeNestBridge.getScheduleData()
                // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ËøáÊª§‰ªäÊó•ËØæÁ®ãÁöÑÈÄªËæë
                return Math.min(courses.length, 8) // ÈôêÂà∂ÊòæÁ§∫Êï∞Èáè
            } catch (e) {
                console.log("Ëé∑ÂèñËØæÁ®ãÊï∞ÊçÆÂ§±Ë¥•:", e)
            }
        }
        return 3 // ÈªòËÆ§ÂÄº
    }

    function loadTodayClasses() {
        if (typeof timeNestBridge !== 'undefined') {
            try {
                var courses = timeNestBridge.getScheduleData()
                todayClassesModel.clear()

                var today = new Date()
                var dayOfWeek = today.getDay() // 0=Âë®Êó•, 1=Âë®‰∏Ä, ..., 6=Âë®ÂÖ≠
                var currentTime = today.getHours() * 100 + today.getMinutes() // ËΩ¨Êç¢‰∏∫HHMMÊ†ºÂºè

                // ËøáÊª§‰ªäÊó•ËØæÁ®ã
                for (var i = 0; i < courses.length; i++) {
                    var course = courses[i]
                    if (course.time && course.time.includes(getDayName(dayOfWeek))) {
                        var status = "upcoming"

                        // Ëß£ÊûêËØæÁ®ãÊó∂Èó¥ÔºåÂà§Êñ≠Áä∂ÊÄÅ
                        var timeMatch = course.time.match(/(\d{2}):(\d{2})-(\d{2}):(\d{2})/)
                        if (timeMatch) {
                            var startTime = parseInt(timeMatch[1]) * 100 + parseInt(timeMatch[2])
                            var endTime = parseInt(timeMatch[3]) * 100 + parseInt(timeMatch[4])

                            if (currentTime >= startTime && currentTime <= endTime) {
                                status = "current"
                            } else if (currentTime > endTime) {
                                status = "finished"
                            }
                        }

                        todayClassesModel.append({
                            time: extractTime(course.time),
                            subject: course.name || "Êú™Áü•ËØæÁ®ã",
                            location: course.location || "Êú™Áü•Âú∞ÁÇπ",
                            status: status
                        })
                    }
                }

                // Â¶ÇÊûúÊ≤°Êúâ‰ªäÊó•ËØæÁ®ãÔºåÊòæÁ§∫ÊèêÁ§∫
                if (todayClassesModel.count === 0) {
                    todayClassesModel.append({
                        time: "",
                        subject: "‰ªäÊó•Êó†ËØæÁ®ãÂÆâÊéí",
                        location: "",
                        status: "none"
                    })
                }
            } catch (e) {
                console.log("Âä†ËΩΩ‰ªäÊó•ËØæÁ®ãÂ§±Ë¥•:", e)
                todayClassesModel.append({
                    time: "",
                    subject: "Âä†ËΩΩËØæÁ®ãÂ§±Ë¥•",
                    location: "",
                    status: "error"
                })
            }
        }
    }

    function getDayName(dayOfWeek) {
        var days = ["Âë®Êó•", "Âë®‰∏Ä", "Âë®‰∫å", "Âë®‰∏â", "Âë®Âõõ", "Âë®‰∫î", "Âë®ÂÖ≠"]
        return days[dayOfWeek] || ""
    }

    function extractTime(timeStr) {
        // ‰ªé"Âë®‰∏Ä 08:00-09:40"‰∏≠ÊèêÂèñ"08:00-09:40"
        var match = timeStr.match(/(\d{2}:\d{2}-\d{2}:\d{2})/)
        return match ? match[1] : timeStr
    }

    // ÂÆöÊó∂Âà∑Êñ∞‰ªäÊó•ËØæÁ®ã
    Timer {
        id: refreshTimer
        interval: 60000 // ÊØèÂàÜÈíüÂà∑Êñ∞‰∏ÄÊ¨°
        running: true
        repeat: true
        onTriggered: loadTodayClasses()
    }

    function getPendingTasksCount() {
        // ËøîÂõûÂæÖÂäû‰ªªÂä°Êï∞Èáè
        if (typeof timeNestBridge !== 'undefined') {
            try {
                var tasks = timeNestBridge.getTasksData()
                var pendingCount = 0
                for (var i = 0; i < tasks.length; i++) {
                    if (!tasks[i].completed) {
                        pendingCount++
                    }
                }
                return pendingCount
            } catch (e) {
                console.log("Ëé∑Âèñ‰ªªÂä°Êï∞ÊçÆÂ§±Ë¥•:", e)
            }
        }
        return 5 // ÈªòËÆ§ÂÄº
    }

    function getCompletedTasksCount() {
        // ËøîÂõûÂ∑≤ÂÆåÊàê‰ªªÂä°Êï∞Èáè
        if (typeof timeNestBridge !== 'undefined') {
            try {
                var tasks = timeNestBridge.getTasksData()
                var completedCount = 0
                for (var i = 0; i < tasks.length; i++) {
                    if (tasks[i].completed) {
                        completedCount++
                    }
                }
                return completedCount
            } catch (e) {
                console.log("Ëé∑Âèñ‰ªªÂä°Êï∞ÊçÆÂ§±Ë¥•:", e)
            }
        }
        return 2 // ÈªòËÆ§ÂÄº
    }

    function refreshDashboard() {
        // Âà∑Êñ∞‰ª™Ë°®ÊùøÊï∞ÊçÆ
        if (typeof timeNestBridge !== 'undefined') {
            // Ëß¶ÂèëÊï∞ÊçÆÈáçÊñ∞Âä†ËΩΩ
            todayCoursesCount.text = getTodayClassesCount().toString()
            pendingTasksCount.text = getPendingTasksCount().toString()
            completedTasksCount.text = getCompletedTasksCount().toString()
        }
    }

    function createNewTask() {
        // ÂàõÂª∫Êñ∞‰ªªÂä°
        if (typeof timeNestBridge !== 'undefined') {
            // ËøôÈáåÂèØ‰ª•ÊâìÂºÄ‰ªªÂä°ÂàõÂª∫ÂØπËØùÊ°ÜÊàñÂàáÊç¢Âà∞‰ªªÂä°È°µÈù¢
            timeNestBridge.showNotification("Âø´ÈÄüÊìç‰Ωú", "ËØ∑ÂâçÂæÄ‰ªªÂä°ÁÆ°ÁêÜÈ°µÈù¢ÂàõÂª∫Êñ∞‰ªªÂä°")
        }
    }

    function toggleFloatingWindow() {
        // ÂàáÊç¢ÊÇ¨ÊµÆÁ™ó
        if (typeof timeNestBridge !== 'undefined') {
            var success = timeNestBridge.toggleFloatingWindow()
            if (success) {
                timeNestBridge.showNotification("ÊÇ¨ÊµÆÁ™ó", "ÊÇ¨ÊµÆÁ™óÁä∂ÊÄÅÂ∑≤ÂàáÊç¢")
            }
        }
    }

    // ÁªÑ‰ª∂Âä†ËΩΩÂÆåÊàêÊó∂Âà∑Êñ∞Êï∞ÊçÆ
    Component.onCompleted: {
        refreshDashboard()
    }
}
